#!/bin/bash

# Script d'automatisation pour v√©rifier la sant√© du repository
# V√©rifie avant chaque commit/push que le repo est sain

set -e

REPO_ROOT="/Users/laidhamoudi/Downloads/Chisfis-Nextjs"
cd "$REPO_ROOT"

echo "üîç V√©rification automatique de la sant√© du repository..."

# Fonction de v√©rification des fichiers dangereux
check_dangerous_files() {
    echo "üìÇ V√©rification des fichiers/dossiers volumineux..."
    
    # V√©rifier si des dossiers g√©n√©r√©s sont track√©s (exclure les scripts)
    dangerous_files=$(git ls-files | grep -E "(^|/)node_modules/|(^|/)\.next/|(^|/)out/|(^|/)dist/|(^|/)build/")
    if [ -n "$dangerous_files" ]; then
        echo "‚ùå ERREUR: Des dossiers g√©n√©r√©s sont track√©s par Git!"
        echo "Fichiers probl√©matiques:"
        echo "$dangerous_files" | head -10
        echo ""
        echo "üîß Solution: Ex√©cutez 'git rm -r --cached <fichier>' pour chaque fichier"
        return 1
    fi
    
    echo "‚úÖ Aucun dossier g√©n√©r√© d√©tect√© dans Git"
}

# Fonction de v√©rification de la taille du repo
check_repo_size() {
    echo "üìä V√©rification de la taille du repository..."
    
    repo_size=$(du -sh .git | cut -f1)
    echo "Taille actuelle du .git: $repo_size"
    
    # V√©rifier les gros objets
    large_objects=$(git rev-list --objects --all | git cat-file --batch-check='%(objecttype) %(objectname) %(objectsize) %(rest)' | grep '^blob' | sort -k3nr | head -10)
    
    if echo "$large_objects" | awk '{if($3 > 1048576) print}' | grep -q .; then
        echo "‚ö†Ô∏è  Objets volumineux d√©tect√©s (>1MB):"
        echo "$large_objects" | awk '{if($3 > 1048576) printf "  %s: %.1f MB\n", $4, $3/1048576}'
    else
        echo "‚úÖ Aucun objet volumineux d√©tect√©"
    fi
}

# Fonction de v√©rification du .gitignore
check_gitignore() {
    echo "üìã V√©rification du .gitignore..."
    
    required_patterns=(
        "node_modules/"
        "**/node_modules/"
        ".next/"
        "**/.next/"
        "out/"
        "**/out/"
        "dist/"
        "**/dist/"
        "build/"
        "**/build/"
    )
    
    missing_patterns=()
    for pattern in "${required_patterns[@]}"; do
        if ! grep -q "^$pattern" .gitignore; then
            missing_patterns+=("$pattern")
        fi
    done
    
    if [ ${#missing_patterns[@]} -gt 0 ]; then
        echo "‚ö†Ô∏è  Patterns manquants dans .gitignore:"
        printf "  %s\n" "${missing_patterns[@]}"
        return 1
    else
        echo "‚úÖ .gitignore correctement configur√©"
    fi
}

# Fonction de v√©rification de la structure du projet
check_project_structure() {
    echo "üèóÔ∏è  V√©rification de la structure du projet..."
    
    # V√©rifier que frontend/ et backend/ existent
    if [ ! -d "frontend" ]; then
        echo "‚ùå ERREUR: Dossier frontend/ manquant!"
        return 1
    fi
    
    if [ ! -d "backend" ]; then
        echo "‚ùå ERREUR: Dossier backend/ manquant!"
        return 1
    fi
    
    # V√©rifier la structure frontend
    if [ ! -f "frontend/package.json" ]; then
        echo "‚ö†Ô∏è  frontend/package.json manquant"
    fi
    
    if [ ! -f "frontend/.gitignore" ]; then
        echo "‚ö†Ô∏è  frontend/.gitignore manquant"
    fi
    
    echo "‚úÖ Structure de projet valide"
}

# Fonction de v√©rification des variables d'environnement
check_env_security() {
    echo "üîê V√©rification de la s√©curit√© des variables d'environnement..."
    
    # V√©rifier qu'aucun fichier .env n'est track√©
    if git ls-files | grep -q "\.env$"; then
        echo "‚ùå ERREUR: Fichier .env track√© par Git!"
        echo "Fichiers .env track√©s:"
        git ls-files | grep "\.env$"
        return 1
    fi
    
    # V√©rifier les cl√©s sensibles dans le code
    sensitive_patterns=("password.*=.*['\"][^'\"]+['\"]" "secret.*=.*['\"][^'\"]+['\"]" "key.*=.*['\"][^'\"]+['\"]")
    
    for pattern in "${sensitive_patterns[@]}"; do
        if git grep -i "$pattern" -- '*.js' '*.ts' '*.jsx' '*.tsx' '*.json' 2>/dev/null | grep -v "placeholder\|example\|demo"; then
            echo "‚ö†Ô∏è  Donn√©es sensibles potentielles d√©tect√©es dans le code"
        fi
    done
    
    echo "‚úÖ V√©rification de s√©curit√© termin√©e"
}

# Fonction principale
main() {
    echo "===========================================" 
    echo "üöÄ AUDIT AUTOMATIQUE DU REPOSITORY"
    echo "Heure: $(date)"
    echo "==========================================="
    echo ""
    
    # Ex√©cuter toutes les v√©rifications
    check_dangerous_files
    echo ""
    check_repo_size
    echo ""
    check_gitignore
    echo ""
    check_project_structure
    echo ""
    check_env_security
    echo ""
    
    echo "==========================================="
    echo "‚úÖ AUDIT TERMIN√â AVEC SUCC√àS!"
    echo "Le repository est pr√™t pour commit/push"
    echo "==========================================="
}

# Ex√©cution conditionnelle
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi
