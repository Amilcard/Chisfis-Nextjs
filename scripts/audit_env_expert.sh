#!/bin/bash

echo "üîí AUDIT EXPERT DES VARIABLES D'ENVIRONNEMENT - CHISFIS"
echo "====================================================="
echo ""

ENV_FILE="./backend/.env"

# Couleurs pour l'affichage
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
NC='\033[0m' # No Color

# V√©rifier la pr√©sence du fichier .env
if [ ! -f "$ENV_FILE" ]; then
  echo -e "${RED}‚ùå Fichier .env manquant dans le backend !${NC}"
  exit 1
fi

echo -e "${BLUE}üîç ANALYSE COMPL√àTE DE: $ENV_FILE${NC}"
echo ""

# Fonction pour analyser une variable
analyze_var() {
    local var_name=$1
    local var_value=$(grep "^$var_name=" "$ENV_FILE" | cut -d'=' -f2-)
    
    case $var_name in
        "JWT_SECRET")
            if [ -z "$var_value" ]; then
                echo -e "${RED}‚ùå $var_name: MANQUANTE${NC}"
                return 1
            elif [ ${#var_value} -lt 32 ]; then
                echo -e "${YELLOW}‚ö†Ô∏è  $var_name: TROP COURTE (${#var_value} caract√®res)${NC}"
                return 2
            elif [[ "$var_value" =~ ^[a-fA-F0-9]{64}$ ]]; then
                echo -e "${GREEN}‚úÖ $var_name: PARFAIT (hex 64 caract√®res)${NC}"
                return 0
            else
                echo -e "${GREEN}‚úÖ $var_name: S√âCURIS√â (${#var_value} caract√®res)${NC}"
                return 0
            fi
            ;;
        "DB_PASSWORD")
            if [ -z "$var_value" ]; then
                echo -e "${RED}‚ùå $var_name: MANQUANTE${NC}"
                return 1
            elif [[ "$var_value" == "postgres" || "$var_value" == "password" || "$var_value" == "123456" ]]; then
                echo -e "${YELLOW}‚ö†Ô∏è  $var_name: VALEUR PAR D√âFAUT DANGEREUSE${NC}"
                return 2
            else
                echo -e "${GREEN}‚úÖ $var_name: CONFIGUR√âE${NC}"
                return 0
            fi
            ;;
        "SMTP_HOST"|"SMTP_USER"|"SMTP_PASS")
            if [ -z "$var_value" ]; then
                echo -e "${YELLOW}‚ö†Ô∏è  $var_name: NON CONFIGUR√âE (email d√©sactiv√©)${NC}"
                return 2
            elif [[ "$var_name" == "SMTP_PASS" && "$var_value" == "configure_your_smtp_password" ]]; then
                echo -e "${YELLOW}‚ö†Ô∏è  $var_name: PLACEHOLDER - √Ä REMPLACER${NC}"
                return 2
            else
                echo -e "${GREEN}‚úÖ $var_name: CONFIGUR√âE${NC}"
                return 0
            fi
            ;;
        *)
            if [ -z "$var_value" ]; then
                echo -e "${RED}‚ùå $var_name: MANQUANTE${NC}"
                return 1
            else
                echo -e "${GREEN}‚úÖ $var_name: OK${NC}"
                return 0
            fi
            ;;
    esac
}

# Variables critiques √† analyser
CRITICAL_VARS=(
    "JWT_SECRET"
    "DB_PASSWORD"
    "DB_USER"
    "DB_NAME"
    "DB_HOST"
    "SMTP_HOST"
    "SMTP_USER" 
    "SMTP_PASS"
    "CORS_ORIGIN"
)

# Compteurs
critical_issues=0
warnings=0
secure_vars=0

echo -e "${PURPLE}üîç ANALYSE VARIABLE PAR VARIABLE:${NC}"
echo ""

for var in "${CRITICAL_VARS[@]}"; do
    analyze_var "$var"
    case $? in
        0) ((secure_vars++)) ;;
        1) ((critical_issues++)) ;;
        2) ((warnings++)) ;;
    esac
done

echo ""
echo -e "${BLUE}üìä R√âSUM√â DE L'AUDIT:${NC}"
echo "   ‚Ä¢ Variables s√©curis√©es: $secure_vars/${#CRITICAL_VARS[@]}"
echo "   ‚Ä¢ Avertissements: $warnings"
echo "   ‚Ä¢ Probl√®mes critiques: $critical_issues"

# V√©rifications additionnelles
echo ""
echo -e "${PURPLE}üîç V√âRIFICATIONS ADDITIONNELLES:${NC}"

# Permissions du fichier
perms=$(stat -f "%A" "$ENV_FILE" 2>/dev/null || stat -c "%a" "$ENV_FILE" 2>/dev/null)
if [[ "$perms" == "600" ]]; then
    echo -e "${GREEN}‚úÖ Permissions s√©curis√©es ($perms)${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  Permissions √† restreindre (actuellement: $perms)${NC}"
    echo "   Commande: chmod 600 $ENV_FILE"
fi

# V√©rifier .gitignore
if [ -f ".gitignore" ] && grep -q "\.env" .gitignore; then
    echo -e "${GREEN}‚úÖ .env prot√©g√© dans .gitignore${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  Ajoutez '.env' dans .gitignore${NC}"
fi

# Logs dangereux
if [ -d "./backend/src" ]; then
    dangerous_logs=$(grep -r "console\.log.*process\.env" ./backend/src/ 2>/dev/null | wc -l | tr -d ' ')
    if [ "$dangerous_logs" -eq 0 ]; then
        echo -e "${GREEN}‚úÖ Aucun log dangereux d√©tect√©${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  $dangerous_logs logs de process.env trouv√©s${NC}"
    fi
fi

# Recommandations finales
echo ""
if [ $critical_issues -eq 0 ] && [ $warnings -le 2 ]; then
    echo -e "${GREEN}üéâ CONFIGURATION S√âCURIS√âE !${NC}"
    echo -e "${GREEN}‚úÖ Votre backend est pr√™t pour le d√©veloppement${NC}"
    
    if [ $warnings -gt 0 ]; then
        echo ""
        echo -e "${BLUE}üí° AM√âLIORATIONS OPTIONNELLES:${NC}"
        echo "‚Ä¢ Finalisez la configuration SMTP si vous voulez envoyer des emails"
        echo "‚Ä¢ Testez la connexion √† votre base de donn√©es"
    fi
else
    echo -e "${RED}üö® ACTIONS REQUISES !${NC}"
    echo ""
    echo -e "${BLUE}üìã PRIORIT√âS:${NC}"
    [ $critical_issues -gt 0 ] && echo "1. Corrigez les variables manquantes (‚ùå)"
    [ $warnings -gt 0 ] && echo "2. S√©curisez les variables avec avertissements (‚ö†Ô∏è)"
    echo "3. Appliquez les v√©rifications additionnelles"
fi

echo ""
echo -e "${BLUE}üîó OUTILS UTILES:${NC}"
echo "‚Ä¢ G√©n√©rer JWT_SECRET: openssl rand -hex 64"
echo "‚Ä¢ Tester la config: node backend/test-jwt.js"
echo "‚Ä¢ Voir le fichier: cat $ENV_FILE"
